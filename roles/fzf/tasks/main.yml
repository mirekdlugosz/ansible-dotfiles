- name: Checking if fzf is available
  command: fzf --version
  register: cmd_fzf_installed
  ignore_errors: True

- name: Checking fzf version
  shell: "fzf --version | awk 'NR==1 {print $1}'"
  register: cmd_fzf_version
  when: cmd_fzf_installed.rc == 0

- set_fact:
    fzf_installation_required: True
  when: cmd_fzf_installed.rc != 0 or cmd_fzf_version.stdout != fzf_version

- set_fact:
    fzf_installation_required: False
  when: fzf_installation_required is undefined

- name: Preparing tmp directory
  tempfile:
    state: directory
    suffix: fzf
  register: fzf_tmp_dir
  when: fzf_installation_required

- name: Cloning fzf git repository
  git:
    repo: "{{ fzf_git_repo }}"
    dest: "{{ fzf_tmp_dir.path }}"
    version: "{{ fzf_version }}"
  when: fzf_installation_required

- name: Copying bash key binding file
  command: "cp {{ fzf_tmp_dir.path }}/shell/key-bindings.bash {{ path_shell_config }}/fzf-keys.bash"
  when: fzf_installation_required

- name: Downloading fzf archive
  get_url:
    url: "{{ fzf_archive_url }}"
    dest: "{{ fzf_tmp_dir.path }}/{{ fzf_archive }}"
  when: fzf_installation_required

- name: Extracting fzf archive
  unarchive:
    src: "{{ fzf_tmp_dir.path }}/{{ fzf_archive }}"
    dest: "{{ fzf_tmp_dir.path }}"
    remote_src: yes
  when: fzf_installation_required

- name: Find extracted fzf executable
  find:
    paths: "{{ fzf_tmp_dir.path }}"
    patterns: "^fzf$"
    recurse: yes
    use_regex: yes
  register: fzf_find_results
  when: fzf_installation_required

- name: Installing fzf
  command: "cp {{ item.path }} {{ path_local_bin }}/fzf"
  with_items: "{{ fzf_find_results.files }}"
  when: fzf_installation_required

- name: Ensuring correct executable permissions
  file:
    path: "{{ path_local_bin }}/fzf"
    mode: "0775"
  when: fzf_installation_required

- name: Clean up build directory
  file:
    path: "{{ fzf_tmp_dir.path }}"
    state: absent
  when: fzf_installation_required
