- name: Checking if fd is available
  ansible.builtin.command: fd --version
  register: cmd_fd_installed
  ignore_errors: true
  when: fd_perform_install is undefined
  changed_when: false

- name: Checking fd version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      fd --version | awk 'NR==1 {print $2}'
  register: cmd_fd_version
  when:
    - fd_perform_install is undefined
    - cmd_fd_installed.rc == 0
  changed_when: false

- name: Set fd_perform_install fact
  ansible.builtin.set_fact:
    fd_perform_install: true
  when:
    - fd_perform_install is undefined
    - cmd_fd_installed.rc != 0 or cmd_fd_version.stdout != fd_version

- name: Set up fd
  when: fd_perform_install is defined and fd_perform_install
  block:

    - name: Preparing tmp directory
      ansible.builtin.tempfile:
        state: directory
        suffix: fd
      register: fd_tmp_dir

    - name: Downloading fd archive
      ansible.builtin.get_url:
        url: "{{ fd_archive_url }}"
        dest: "{{ fd_tmp_dir.path }}/{{ fd_archive }}"
        mode: "0644"

    - name: Extracting fd archive
      ansible.builtin.unarchive:
        src: "{{ fd_tmp_dir.path }}/{{ fd_archive }}"
        dest: "{{ fd_tmp_dir.path }}"
        remote_src: true

    - name: Find extracted fd executable
      ansible.builtin.find:
        paths: "{{ fd_tmp_dir.path }}"
        patterns: "^fd$"
        recurse: true
        use_regex: true
      register: fd_find_results

    - name: Installing fd
      ansible.builtin.command: "cp {{ item.path }} {{ path_local_bin }}/fd"
      with_items: "{{ fd_find_results.files }}"
      changed_when: true

    - name: Ensuring correct executable permissions
      ansible.builtin.file:
        path: "{{ path_local_bin }}/fd"
        mode: "0775"

    - name: Clean up build directory
      ansible.builtin.file:
        path: "{{ fd_tmp_dir.path }}"
        state: absent
