- name: Checking if ack is available
  ansible.builtin.command: ack --version
  register: cmd_ack_installed
  ignore_errors: true
  when: ack_perform_install is undefined
  changed_when: false

- name: Checking ack version
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      ack --version | awk 'NR==1 {print $2}'
  register: cmd_ack_version
  when:
    - ack_perform_install is undefined
    - cmd_ack_installed.rc == 0
  changed_when: false

- name: Set ack_perform_install fact
  ansible.builtin.set_fact:
    ack_perform_install: true
  when:
    - ack_perform_install is undefined
    - cmd_ack_installed.rc != 0 or cmd_ack_version.stdout != ack_version

- name: Set up ack
  when: ack_perform_install is defined and ack_perform_install
  block:

    - name: Installing ack dependency
      ansible.builtin.dnf:
        name: perl-File-Next
        state: present
      become: true
      when:
        - ansible_os_family == "RedHat"

    - name: Preparing build directory
      ansible.builtin.tempfile:
        state: directory
        suffix: ack
      register: ack_build_dir

    - name: Cloning ack
      ansible.builtin.git:
        repo: "{{ ack_git_repo }}"
        dest: "{{ ack_build_dir.path }}"
        version: "{{ ack_version }}"
        depth: "1"

    - name: Building ack
      ansible.builtin.command:
        cmd: "{{ item }}"
        chdir: "{{ ack_build_dir.path }}"
      loop:
        - "perl Makefile.PL"
        - "make"
        - "make ack-standalone"
      changed_when: true

    - name: Installing ack
      ansible.builtin.command: "cp {{ ack_build_dir.path }}/ack-standalone {{ path_local_bin }}/ack"
      changed_when: true

    - name: Clean up build directory
      ansible.builtin.file:
        path: "{{ ack_build_dir.path }}"
        state: absent
