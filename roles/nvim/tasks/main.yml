- name: "Prepare nvim directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    mode: "0775"
  loop:
    - "{{ nvim_dir }}"
    - "{{ nvim_dir }}/ftplugin/"
    - "{{ nvim_dir }}/lsp/"
    - "{{ nvim_dir }}/snippets/"
    - "{{ nvim_dir }}/lua/"
    - "{{ nvim_share_dir }}/site/pack/paqs/start/paq-nvim/"

- name: "Copy static modular configuration files"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ nvim_dir }}/{{ item.path }}"
    mode: "0644"
  with_community.general.filetree: .
  when: item.state == 'file'

- name: "Generate modular configuration files"
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ nvim_dir }}/{{ item }}"
    mode: "0644"
  loop:
    - "lua/10_opts.lua"
    - "lua/20_plugins.lua"
    - "lua/30_plugin_opts.lua"
    - "lua/40_keys.lua"
    - "init.lua"

- name: "Clone packer (plugin management tool)"
  ansible.builtin.git: # noqa: latest
    repo: "{{ paq_git_repo }}"
    dest: "{{ nvim_share_dir }}/site/pack/paqs/start/paq-nvim/"
    depth: "1"

- name: "Install plugins"
  ansible.builtin.command: >
    nvim --headless -c 'autocmd User PaqDoneSync quitall' -c 'PaqSync'
  register: _paq_sync
  failed_when:
    - "'0 errors' not in _paq_sync.stderr"
  changed_when:
    - "'0 ok' not in _paq_sync.stderr"

- name: "Install treesitter modules"
  ansible.builtin.command: >
    nvim --headless -c 'TSUpdateSync' -c 'qa'
  register: _ts_update
  failed_when:
    - _ts_update.rc > 1
    - "'All parsers are up-to-date!' not in _ts_update.stderr"
  changed_when:
    - _ts_update.stderr != "All parsers are up-to-date!"

- name: "Check installed LSP servers"
  ansible.builtin.command: >
    nvim --headless
    -c 'lua vim.print(vim.json.encode(require("mason-lspconfig").get_installed_servers()))'
    -c 'qa'
  register: _installed_lsp_servers
  changed_when: false

- name: "Create list of LSP servers to install"
  ansible.builtin.set_fact:
    _missing_lsp_servers: >
      {{
        (nvim_lsps | difference(_installed_lsp_servers.stderr_lines[-1] | from_json))
        | difference(nvim_lsps_exclude)
      }}

- name: "Install LSP servers"
  ansible.builtin.command: >
      nvim --headless -c 'LspInstall {{ _missing_lsp_servers | join(" ") }}' -c 'qa'
  when: (_missing_lsp_servers | length) >= 1
  register: _lsp_install
  failed_when:
    - _lsp_install.rc > 1
  changed_when:
    - (_lsp_install.stderr_lines | length) > 2
